{"posts":[{"title":"HazeDayIndex","text":"Cai et al., 2017, NCC 10.1038/nclimate3249 Haze weather index (HWI) Because V850, $\\Delta{T}$ and U500 are not independent, we normalized each time series by its respective standard deviation and summed the three normalized time series to construct a single index. Zhang et el., 2018, EP https://doi.org/10.1016/j.envpol.2018.08.019 Haze Day Index (HDI) Horton et al., 2014, NCC DOI: 10.1038/NCLIMATE2272 Air Stagnation Index (ASI) A grid cell day is considered stagnant when daily-mean near-surface (10-m) wind speeds are &lt;3.2 m s−1 , daily-mean mid-tropospheric (500 mb) wind speeds are &lt;13 m s−1 , and daily-mean precipitation accumulation is &lt;1 mm. Wang et al., 2018, BMAS doi:10.1175/BAMS-D-16-0301.1 air stagnation day","link":"/blog/2022/11/01/HazeDayIndex/"},{"title":"WRF&#x2F;Chem","text":"安装 问题1：configure之后需要修改下configure.wrf文件，mpif90改成mpiifort 运行排放处理 关于wildfire排放 在Registry/registry.chem中，有物种定义 package biomassb biomass_burn_opt==1 - state:mean_fct_agtf,mean_fct_agef,mean_fct_agsv,mean_fct_aggr,firesize_agtf,firesize_agef,firesize_agsv,firesize_aggr;ebu:ebu_no,ebu_no2,ebu_co,ebu_co2,ebu_eth,ebu_hc3,ebu_hc5,ebu_hc8,ebu_ete,ebu_olt,ebu_oli,ebu_pm25,ebu_pm10,ebu_dien,ebu_iso,ebu_api,ebu_lim,ebu_tol,ebu_csl,ebu_hcho,ebu_ald,ebu_ket,ebu_macr,ebu_ora1,ebu_ora2,ebu_so2,ebu_nh3,ebu_oc,ebu_bc,ebu_sulf,ebu_dms;ebu_in:ebu_in_no,ebu_in_no2,ebu_in_co,ebu_in_co2,ebu_in_eth,ebu_in_hc3,ebu_in_hc5,ebu_in_hc8,ebu_in_ete,ebu_in_olt,ebu_in_oli,ebu_in_pm25,ebu_in_pm10,ebu_in_dien,ebu_in_iso,ebu_in_api,ebu_in_lim,ebu_in_tol,ebu_in_csl,ebu_in_hcho,ebu_in_ald,ebu_in_xyl,ebu_in_ket,ebu_in_macr,ebu_in_ora1,ebu_in_ora2,ebu_in_so2,ebu_in_nh3,ebu_in_oc,ebu_in_bc,ebu_in_sulf,ebu_in_dms,ebu_in_ash ebu表示最终模式需要的物种；ebu_in 表示排放文件中的物种（wrffirechemi_d01文件中，物种名称为ebu_in_no） 数据处理流程 数据读取程序为share/mediation_integrate.F, 数据读到ebu_in数组中（此为推测），如下： ```fortranCALL med_auxinput_in ( grid, ialarm, config_flags ) WRITE ( message , FMT='(A,i3,A,i3)') 'Input data processed for aux input ',&amp; ialarm - first_auxinput + 1, ' for domain ',grid%id 1234567891011121314151617181920212. 在```chem/emissions_driver.F```程序中调用 ```do_plumerisefire```将```ebu_in```赋值给```ebu```, - 涉及子程序```chem/module_plumerise1.f90``` - ```do_plumerisefire```是根据```namelist.input```中的```plumerisefire_frq```来设置的，每隔一段时间运行一次 - ```fortran if( do_plumerisefire )then CALL wrf_debug(15,'fire emissions: calling biomassb') write(0,*)ktau,stepfirepl call plumerise_driver (id,ktau,dtstep, &amp; ebu,ebu_in, &amp; mean_fct_agtf,mean_fct_agef,mean_fct_agsv,mean_fct_aggr, &amp; firesize_agtf,firesize_agef,firesize_agsv,firesize_aggr, &amp; config_flags, t_phy,moist, &amp; rho_phy,vvel,u_phy,v_phy,p_phy, &amp; emis_ant,z_at_w,z,config_flags%scale_fire_emiss, &amp; ids,ide, jds,jde, kds,kde, &amp; ims,ime, jms,jme, kms,kme, &amp; its,ite, jts,jte, kts,kte ) endif 在chem/emissions_driver.F程序中调用 add_emis_burn： ```fortran CASE (BIOMASSB,BIOMASSB_MOZC,BIOMASSB_MOZ,BIOMASSB_GHG) CALL wrf_debug(15,'fire emissions: adding biomassb emissions') call add_emis_burn(id,dtstep,ktau,dz8w,rho_phy,chem,&amp; julday,gmt,xlat,xlong,t_phy,p_phy, &amp; ebu,config_flags%chem_opt,0,config_flags%biomass_burn_opt, &amp; num_chem,ids,ide, jds,jde, kds,kde, &amp; ims,ime, jms,jme, kms,kme, &amp; its,ite, jts,jte, kts,kte ) 123456789101112131415161718- 注意：```chem/module_add_emiss_burn.F```中将排放中的物种分配给不同的化学机制- ```fortran emiss_select: SELECT CASE(chem_opt) CASE (RADM2,RACM_KPP,RACM_MIM_KPP,SAPRC99_KPP,SAPRC99_MOSAIC_4BIN_VBS2_KPP, &amp; SAPRC99_MOSAIC_8BIN_VBS2_AQ_KPP, SAPRC99_MOSAIC_8BIN_VBS2_KPP) do j=jts,jte do i=its,ite do k=kts,kte conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/60./dz8w(i,k,j) chem(i,k,j,p_csl) = chem(i,k,j,p_csl) &amp; +ebu(i,k,j,p_ebu_csl)*conv_rho chem(i,k,j,p_iso) = chem(i,k,j,p_iso) &amp; +ebu(i,k,j,p_ebu_iso)*conv_rho chem(i,k,j,p_no) = chem(i,k,j,p_no) &amp; +ebu(i,k,j,p_ebu_no)*conv_rho 注意，在emissions_driver.F中，由于不同化学机制的物种不一样，需要对读入的排放数据进行匹配（mapping）， 存在问题，saprc99机制中并没有正确读入野火排放数据，VOC的mapping是和其他机制一样，比如chem/module_add_emiss_burn.F文件中，saprc99机制中并没有HC3物种，只有ALK，所以p_hc3=1,读入的ebu(p_ebu_hc3)排放赋值给了一个不存在的物种！！！ 需要修改，参考Simulating Air Pollution in the Severe Fires Event during 2015 El-Niño in Indonesia using WRF-Chem MOSAIC气溶胶模块 mosaic bin粒径范围设置, 在module_mosaic_driver.F程序中 ```fortran!! set section size arrays! do itype = 1, ntype_aer nhi = nsize_aer(itype) dlo_sect(1,itype) = 3.90625e-6 dhi_sect(nhi,itype) = 10.0e-4 dum = log( dhi_sect(nhi,itype)/dlo_sect(1,itype) ) / nhi !replaced alog by log by Manish Shrivastava on 11/28/2011. alog denoted natural log in fortran 77. log(x) is natural log in fortran 90 do n = 2, nhi dlo_sect(n,itype) = dlo_sect(1,itype) * exp( (n-1)*dum ) dhi_sect(n-1,itype) = dlo_sect(n,itype) end do do n = 1, nhi dcen_sect(n,itype) = sqrt( dlo_sect(n,itype)*dhi_sect(n,itype) ) volumlo_sect(n,itype) = (pi/6.) * (dlo_sect(n,itype)**3) volumhi_sect(n,itype) = (pi/6.) * (dhi_sect(n,itype)**3) volumcen_sect(n,itype) = (pi/6.) * (dcen_sect(n,itype)**3) sigmag_aer(n,itype) = (dhi_sect(n,itype)/dlo_sect(n,itype))**0.289 end do end do 1234567891011121314151617181920212223- 简化测试8bin的结果如下： - ```fortran program main real dlo_sect(8) real dhi_sect(8) integer nhi nhi = 8 dlo_sect(1) = 3.90625e-6 dhi_sect(nhi) = 10.0e-4 dum = log( dhi_sect(nhi)/dlo_sect(1) ) / nhi do n = 2, nhi dlo_sect(n) = dlo_sect(1) * exp( (n-1)*dum ) dhi_sect(n-1) = dlo_sect(n) end do print*,dlo_sect print*,dhi_sect end ! 输出为 3.9062502E-06 7.8125004E-06 1.5625001E-05 3.1250001E-05 6.2500003E-05 1.2500001E-04 2.5000001E-04 5.0000002E-04 7.8125004E-06 1.5625001E-05 3.1250001E-05 6.2500003E-05 1.2500001E-04 2.5000001E-04 5.0000002E-04 1.0000000E-03 saprc99_mosaic_8bin_vbs2_aq (chem_opt=203)说明 参考文献Shrivastava, M., Fast, J., Easter, R., Gustafson Jr, W. I., Zaveri, R. A., Jimenez, J. L., Saide, P., and Hodzic, A.: Modeling organic aerosols in a megacity: comparison of simple and complex representations of the volatility basis set approach, Atmos. Chem. Phys., 11, 6639-6662, 10.5194/acp-11-6639-2011, 2011. SAPRC-99 mechanism with The 9-species VBS mechanism / highly condensed 2-species SOA mechanism POA的计算 The POA species are segregated by two emissions sectors: biomass burning and anthropogenic (predominately fossil fuel) To allow calculating O:C ratios for the modeled OA, separate model species are used for the oxygen and non-oxygen (C, H, N) components of each species. POA(a)i,e,x,n = aerosol-phase POA, where i is the volatility species (1–9), e is either the biomass or anthropogenic emission sector, x is either the oxygen or non-oxygen component, and n is the size bin (1–4). 模式中的POA物种名如，pcg1_b_c、pcg2_f_c SOA的计算 SOA包括两个部分 SI-SOA: formation from S/IVOC, 模式中物种名和POA对应，opcg1_b_c、opcg2_f_c V-SOA: formation from trantional VOCs,模式中物种名分别为ant1_c和biog1_c，分别表示来自人为排放VOC和自然排放VOC 可以从KPP中的mechanism文件中看出saprc99_mosaic_8bin_vbs2_aq.eqn WRF-Chem中使用的实际上是SAPRC-99 mechanism with highly condensed 2-species SOA mechanism，只考虑了2种挥发性的POA，即 $C^∗\\ values\\ (at\\ 298\\ K\\ and\\ 1\\ atm)\\ of\\ 10^{−2}\\ and\\ 10^5\\ µg\\ m^{−3} $ there are 40 POA species (8 gas, 32 aerosol), 20 SI-SOA species (4 gas, 16 aerosol), and 10 V-SOA species (2 gas, 8 aerosol) （Shrivastava的文章中使用的是4bin的MOSAIC方案） 其中POA中POA(a)i = 2,e,x would almost entirely remain in the gas phase under most atmospheric conditions due to its high volatility，因此模式只输出16个aerosol物种 注意： 在8binMOSAIC方案中，V-SOA只输出了4个bin（共8 aerosol，同4bin方案），其他bin的变量没有输出，在register.chem中有定义 气溶胶光学性质的计算总体思路（以MOSAIC方案为例） 相同bin中内混，不同bin之间外混；对特定的bin[i]： 计算各组分质量$M_{i,j}$和数浓度$N_i$ 根据质量和数浓度计算体积$V_{i,j}$和直径$D_{p,i}$ 计算负折射指数(这里会根据混合方式的不同[表现在模式中即option_method]分别计算)： volume averaging approximation: 总的负折射率等于质量加权平均 Maxwell-Garnett approximation：根据Maxwell-Garnett计算 shell-core mixing：分别计算核和壳的负折射指数 调用mie散射算法计算总的吸收效率、散射效率和不对称因子（这里会根据option_mie选项有两种方法）： option_mie=1 切比雪夫多项式近似… Chebyshev economization 即简化了Mie散射计算过程 option_mie=2 完整的Mie散射算法 程序中细节说明 气溶胶光学性质参数的计算程序 optical_driver.F module_optical_averaging.F 重要的子程序 subroutine optical_prep_sectional， 准备Mie散射计算需要的相关数据 根据气溶胶组分数据计算下列变量： ```fortranradius_core,radius_wet, number_bin, &amp;swrefindx,swrefindx_core,swrefindx_shell, &amp;lwrefindx,lwrefindx_core,lwrefindx_shell ! number_bin_col(nbin_a,kmaxd) — number density in layer, #/cm^3! radius_wet_col(nbin_a,kmaxd) — wet radius, shell, cm! radius_core_col(nbin_a,kmaxd) — core radius, cm; NOTE: 1234567891011121314151617181920212223 - **如果需要修改Mie散射计算结果，可以在此处增加相关变量** 2. subroutine optical_averaging ，其中，会调用 - optical_prep_sectional 子程序： 计算*3-D arrays for refractive index, wet radius, and aerosol number then passed into mieaer_sectional* - mieaer程序： *produces vertical profiles of aerosol optical properties for 4 wavelengths that are put into 3-D arrays and passed back up to chem_driver.F*，其中 - *tauaer\\*, waer\\*, gaer\\* passed to module_ra_gsfcsw.F* - *tauaer\\*, waer\\*, gaer\\*, l2-l7 passed to module_phot_fastj.F*- 输出变量说明： - ```fortran ! OUTPUT: saved in module_fastj_cmnmie ! real tauaer ! aerosol optical depth 气溶胶光学厚度 ! waer ! aerosol single scattering albedo 单次散射反照率 ! gaer ! aerosol asymmetery factor 不对称因子 ! extaer ! aerosol extinction 消光 ! l2,l3,l4,l5,l6,l7 ! Legendre coefficients, numbered 0,1,2,...... 勒让德系数 ! sizeaer ! average wet radius 平均湿半径 ! bscoef ! aerosol backscatter coefficient with units km-1 * steradian -1 JCB 2007/02/01 气溶胶后向散射系数 问题： 如果要修改MIE散射的计算结果，可以在 call mieaer 语句之后添加修改 怎么在wrfout中输出tauaer等参数？grid%tauaer1?改register文件， namelist.input中设置 opt_pars_out = 1, 计算AOD： To calculate AOD, you just need to integrate the extinction coef throughout the entire model column; i.e. multiple the extinction coef by the thickness of the model box and sum all the boxes: AOD = ∑ EXT(l) * dz(l) With these namelist options, you should have EXTCOEF55 variable in the output that represents the exticntion coefficient at 550 nm in the units of km^-1. You need to calculate layer thickness (can be done by using PH and PHB variables from the WRF-Chem output). The final step is to calculate AOD as multiplication of EXTCOEF55 with the layer thickness (make sure you have it in km). Alternatively, you can add “tauaer1, tauaer2, tauaer3, and tauaer4” to the model output using runtime I/O option. They represent layer AOD at 300, 400, 600, and 999 nm. The vertical integral of these quantities will give you total AOD at these wavelengths and then you can use the Angstrom power law to derive AOD at any wavelength. ```matlab ##################################### Calculation Using MATLABHeight_in_Km = ((PH + PHB)/(9.81))*(1000) ##### This will calculate the height between WRF levels in Km where PH = Perturbation Geopotential and PHB = Base-State Geopotential. Then if you have number of levels in your output is suppose K for X=1:K Distance_Between_Levels (:,:,X) = Height_in_Km(:,:,X+1) - Height_in_Km(:,:,X); EXTCOF55_Converted(:,:,X) = (EXTCOF55(:,:,X).*Distance_Between_Levels(:,:,X)); end AOD(:,:)= nansum(EXTCOF55_Converted,3); ############## Mean of the Level Dimension ######### ############################################## END123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263 - The way I calculate AOD is by using the variables named TAUAER1, TAUAER2, TAUAER3 and TAUAER4. These variables are the aerosol optical depth of each model layer at 300, 400, 600 and 1000 nm, respectively. To calculate the optical depth at another wavelength then you have to calculate the Angstrom exponent following the formula shown in https://en.wikipedia.org/wiki/Angstrom_exponent E.g. I calculate the total AOD in the column at 550 nm using TAUAER2 and TAUAER3 because the 550 nm wavelength falls between 400 and 600 nm: angstrom_exponent = -( log(TAUAER2) - log(TAUAER3) ) / log(400/600) AOD550_3D = TAUAER2 * ( (400/550) ^ angstrom_exponent ) AOD550_2D = sum(AOD550_2D,3) AOD550_3D is the 3-dimensional AOD where you have an optical depth for each layer of your model. Then, the total column AOD is simply the sum across the third dimension. If the variables TAUAER&lt;n&gt; are not listed in your model outputs, then you need to modify the registry file for chemistry (Registry/registry.chem)and compile again: state real tauaer1 ikj misc 1 - rh &quot;TAUAER1&quot; &quot;bin 1 layer optical thickness&quot; &quot;?&quot; state real tauaer2 ikj misc 1 - rh &quot;TAUAER2&quot; &quot;bin 2 layer optical thickness&quot; &quot;?&quot; state real tauaer3 ikj misc 1 - rh &quot;TAUAER3&quot; &quot;bin 3 layer optical thickness&quot; &quot;?&quot; state real tauaer4 ikj misc 1 - rh &quot;TAUAER4&quot; &quot;bin 4 layer optical thickness&quot; &quot;?&quot;```fortran! key options for aerosol optical properities aer_op_opt ! 1-5 设置光学性质计算方法 ! 根据aer_op_opt 设置 option_method 和 option_mie. ! option_method is used to set the method of aerosol optical properties ! 1. volume averaging mixing ! 2. Maxwell-Garnett mixing ! 3. shell-core ! option_mie is used to set the method of mie routines aer_op_opt_select: SELECT CASE(config_flags%aer_op_opt) CASE (VOLUME_APPROX) option_method=1 option_mie=1 CASE (MAXWELL_APPROX) option_method=2 option_mie=1 CASE (VOLUME_EXACT) option_method=1 option_mie=2 CASE (MAXWELL_EXACT) option_method=2 option_mie=2 CASE (SHELL_EXACT) option_method=3 option_mie=2 CASE DEFAULT! option_mie 选择怎么计算mie散射! option_method 选择怎么计算光学性质! namelist.input 选项aer_op_opt = 1 aerosol optical properties calculated based upon volume approximation = 2 aerosol optical properties calculated based upon Maxwell approximation = 3 aerosol optical properties calculated based upon exact volume approximation = 4 aerosol optical properties calculated based upon exact Maxwell approximation = 5 aerosol optical properties calculated based upon exact shell approximation 说明 [Bond et al., 2013, JGR] 提到: using the Bond and Bergstrom [2006] refractive index and density, Adachi et al. [2010] calculated $MAC_{BC}$ for uncoated spheres as 6.4 $m^2g^{-1}$, with increases for volume mixing (13.6 $m^2g^{-1}$), core shell (13.3 $m^2g^{-1}$), Maxwell-Garnet effective medium approximation (12.0 $m^2g^{-1}$), and realistic coated BC particles (9.9 $m^2g^{-1}$) at 550 nm wavelength. Climate models assume soot particles are spherical and (1) uncoated (external‐mixing model), (2) concentrically coated (core‐shell model), (3) homogeneously mixed with other materials on a molecular scale (volume‐mixing model), (4) mixed with other aerosol particles according to rules such as the Maxwell‐Garnet effective medium approximation (MGEMA), which assumes that isolated soot spherules are suspended in an embedding material","link":"/blog/2022/10/25/WRFChem/"},{"title":"cartopy","text":"站点散点图 在地图上添加colorbar，并设置背景色 添加方框 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849dfs = pd.read_csv(f&quot;../obsdata/dMDA8_dPM25_day_station_{season}.csv&quot;)dfs = dfs.sort_values(&quot;slope&quot;)def cs_scater(ax, lat,lon,slope,p_value,colors,vmin,vmax): cs = ax.scatter(lon, lat,10, slope, cmap=colors,marker=&quot;s&quot;,vmin=vmin,vmax=vmax) cs2 = ax.scatter(lon[p_value&lt;0.1], lat[p_value&lt;0.1], 0.5, c=&quot;k&quot;) ax.add_geometries(china_border.geometries(), ccrs.PlateCarree(),edgecolor='k', linewidth=0.2, zorder=2, facecolor='none') ax.add_geometries(world_border.geometries(), ccrs.PlateCarree(),edgecolor='k', linewidth=0.5, zorder=2, facecolor='none') #标注坐标轴 ax.set_extent([101,132,21,48]) ax.set_xticks(np.linspace(102,130,5), crs=ccrs.PlateCarree()) ax.set_yticks([25,30,35,40,45], crs=ccrs.PlateCarree()) #zero_direction_label用来设置经度的0度加不加E和W lon_formatter = LongitudeFormatter(zero_direction_label=False) lat_formatter = LatitudeFormatter() ax.xaxis.set_major_formatter(lon_formatter) ax.yaxis.set_major_formatter(lat_formatter) for region, pts in cornersdict.items(): ax.plot([pts[0],pts[1],pts[1],pts[0],pts[0]],[pts[2],pts[2],pts[3],pts[3],pts[2]],'k-',lw=0.5) return csproj = ccrs.PlateCarree()fig = plt.figure(figsize=(3,3))ax = fig.add_subplot(1,1,1, projection=proj) cs = cs_scater(ax,dfs.lat,dfs.lon,dfs.slope.values,dfs.p.values,cmaps.CBR_coldhot,-3,3)cbbox = ax.inset_axes([0.74, 0.01, 0.25, 0.15])[cbbox.spines[k].set_visible(False) for k in cbbox.spines]cbbox.tick_params(axis='both', left=False, top=False, right=False, bottom=False, labelleft=False, labeltop=False, labelright=False, labelbottom=False)cbbox.set_facecolor('w')caxes = cbbox.inset_axes([0.1, 0.4, 0.8, 0.23])cbar = fig.colorbar(cs,orientation=&quot;horizontal&quot;,cax=caxes)cbar.ax.tick_params(axis='x', direction='in',length=5)cbar.set_label(&quot;$Fitted\\ slope$&quot;,loc=&quot;center&quot;,labelpad=-23)cticks= [-3,0,3]; cbar.set_ticks(cticks); cbar.set_ticklabels(cticks)ax.text(0.05,0.9,&quot;$2015-2020$&quot;,transform=ax.transAxes,ha=&quot;left&quot;)plt.savefig(f'../figures/dMDA8_dPM25_day_station_{season}',bbox_inches='tight',pad_inches = 0.05, dpi=300, facecolor='w')","link":"/blog/2022/10/25/cartopy/"},{"title":"hexoguide","text":"Hexo 博客常见问题图片问题 参考 https://github.com/cocowool/hexo-image-link 安装hexo-image-link 新建新的页面（tags, categories, about）hexo new page tags 新建的页面出现在souce文件夹下，修改对应的index.md文件： 12345title: tagsdate: 2022-10-24 09:02:56index: truelayout: tagstype: tags ICARUS主题1234$ npm install hexo-theme-icarus$ hexo config theme icarus# 配置文件为 _config.icarus.yml# reference： https://ppoffice.github.io/hexo-theme-icarus/ 新建博客hexo new name 在Hexo中渲染MathJax数学公式在用markdown写技术文档时，免不了会碰到数学公式。常用的Markdown编辑器都会集成Mathjax，用来渲染文档中的类Latex格式书写的数学公式。基于Hexo搭建的个人博客，默认情况下渲染数学公式却会出现各种各样的问题。 原因Hexo默认使用”hexo-renderer-marked”引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线’_’代表斜体，会被渲染引擎处理为&lt;em&gt;标签。 因为类Latex格式书写的数学公式下划线 ‘_’ 表示下标，有特殊的含义，如果被强制转换为&lt;em&gt;标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，$x_i$在开始被渲染的时候，处理为$x&lt;em&gt;i&lt;/em&gt;$，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。 类似的语义冲突的符号还包括’*’, ‘{‘, ‘}’, ‘\\’等。 解决方法解决方案有很多，可以网上搜下，为了节省大家的时间，这里只提供亲身测试过的最靠谱的方法。 更换Hexo的markdown渲染引擎，hexo-renderer-kramed引擎是在默认的渲染引擎hexo-renderer-marked的基础上修改了一些bug，两者比较接近，也比较轻量级。 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save 执行上面的命令即可，先卸载原来的渲染引擎，再安装新的。 然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为hexo-renderer-kramed引擎也有语义冲突的问题。接下来到博客根目录下，找到node_modules\\kramed\\lib\\rules\\inline.js，把第11行的escape变量的值做相应的修改： 12// escape: /^\\\\([\\\\`*{}\\[\\]()#$+\\-.!_&gt;])/, escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/ 这一步是在原基础上取消了对\\,{,}的转义(escape)。 同时把第20行的em变量也要做相应的修改。 12// em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/ 重新启动hexo（先clean再generate）,问题完美解决。哦，如果不幸还没解决的话，看看是不是还需要在使用的主题中配置mathjax开关。 在主题中开启mathjax开关如何使用了主题了，别忘了在主题（Theme）中开启mathjax开关，下面以next主题为例，介绍下如何打开mathjax开关。 进入到主题目录，找到_config.yml配置问题，把mathjax默认的false修改为true，具体如下： 1234# MathJax Supportmathjax: enable: true per_page: true 别着急，这样还不够，还需要在文章的Front-matter里打开mathjax开关，如下： 123456---title: index.htmldate: 2016-12-28 21:01:30tags:mathjax: true-- 不要嫌麻烦，之所以要在文章头里设置开关，是因为考虑只有在用到公式的页面才加载 Mathjax，这样不需要渲染数学公式的页面的访问速度就不会受到影响了。 Hexo博客设置文章加密今天给大家推荐一款适用于 Hexo 的静态博客加密插件：hexo-blog-encrypt，搭配此插件你可以写一些比较私密的博客，通过密码验证的方式让其他人不能随意浏览。 1、安装插件首先运行以下命令，安装设置密码所需要的插件： npm install hexo-blog-encrypt2、修改配置在根目录的配置文件_config.yml中添加以下代码： 12encrypt: enable: true 3、博客文章添加加密字段设置加密之后，不要忘记在新建博文的时候，在头部添加加密的设置信息，如下图： 12password: 密码message: 输入密码界面提示说明 Hexo gitee 搭建博客必须的软件：node.js node.js官方网站：http://nodejs.cn/download/ node.js阿里云镜像站：https://npm.taobao.org/mirrors/node/ Git Git官网(下载速度可能稍慢)：https://git-scm.com/ Git阿里云镜像站（推荐）：https://npm.taobao.org/mirrors/git-for-windows/ 可根据个人喜好替换的软件：Visual Studio Code 官方网站：https://code.visualstudio.com/Download typora 官方网站：https://www.typora.io/ 以上软件若你下载速度慢，可以在这篇文章底部找到我已经下载好了的国内链接，链接里不定期更新以上软件的版本（保证均从官网下载下来不做任何修改）。当然最好是自己去官网下，因为我懒，更新不会很频繁，除非你催我一下（发邮件或者其他什么的）…… 要用到的框架或平台：Hexo 官方网站：https://hexo.io/zh-cn/ Gitee（码云） 官方网站：https://gitee.com/ 安装说明node.js和Typora就不说了，这个灰常简单。 至于Git，它安装的时候选项挺多的，而且还都是洋文，看不懂的话就全部选 next 就行了。你要是非得搞明白它每个选项的意思，emmmm那建议你们自己去搜吧，网上一搜一大把。我反正是不知道每项的意思，（全是废话…）我也不想知道~/手动狗头 检验是否成功安装用 Win + R 打开运行，输入 cmd 并进入cmd窗口 node.js 的检查1node -v npm的检查NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题 1npm -v Git 的检查1git --version 以上有显示版本号，则说明安装成功 Hexo的安装1、安装之前可以先设置一下淘宝镜像加速器1npm install -g cnpm --registry=https://registry.npm.taobao.org 2、全局安装框架1npm install hexo-cli -g 3-1、创建你的博客目录1hexo init 你博客的文件夹名字 3-2、进入你博客的目录1cd 你博客的文件夹名字 4、复制文件到你博客的目录1npm install 5、安装Hexo部署插件请在你博客的目录下启动cmd，再执行以下代码 1npm install hexo-deployer-git --save Git的配置用 Win + R 打开运行，输入 cmd 并进入cmd 设置用户名称1git config --global user.name &quot;用户名&quot; 设置用户邮箱1git config --global user.email &quot;用户邮箱&quot; 生成密钥1ssh-keygen -t rsa -C &quot;用户邮箱&quot; 以上代码执行之后，会让你设置密码，推荐一个都不要设置，直接连按三次回车键。 博客 _config.yml 文件的配置打开你博客根目录的 _config.yml 文件，将一下信息添加到里面去。 1234567deploy: type: git repo: https://gitee.com/hcllmsx/hcllmsx.git #替换成你自己仓库的HTTP URL地址 branch: master 【注意区分】你博客根目录的 _config.yml 文件，和主题根目录的 _config.yml 文件！ Hexo常用代码1、清理缓存1hexo cl hexo cl 是 hexo clean 的简写 2、生成静态页面1hexo g hexo g 是 hexo generate 的简写 3、在本地映射（预览）1hexo s hexo s 是 hexo server 的简写 4、部署推送1hexo d hexo d 是 hexo deploy 的简写 5、以上连写示例一（清理缓存 + 生成静态页面 + 在本地预览）1hexo cl &amp;&amp; hexo g &amp;&amp; hexo s 6、以上连写示例二（清理缓存 + 生成静态页面 + 部署推送）1hexo cl &amp;&amp; hexo g &amp;&amp; hexo d 资源下载由于国内打开国外网站的速度有时候是看运气的，所以如果你下载很慢……可以选择下载我这里下载好的。另外，新建文章的通用模板也在里面，有了它可能会非（mei）常（you）方（luan）便（yong）。最后再再再再重申一次，尽量还是自己下载最新版，因为我更新挺懒的，除非你催我。 链接：https://msx.lanzoui.com/b0ewfyypa 密码：3t1u","link":"/blog/2022/10/23/hexoguide/"},{"title":"hexo备份","text":"Hexo博客如何备份到GithubHexo博客备份创建新分支在Github上博客仓库下创建一个新的分支hexo，并且将这个分支设置为默认分支，具体操作如下： 20220511_03.png 20220511_04.png 20220511_05.png 克隆hexo分支在本地把我们刚建的分支hexo克隆到本地： 20220511_06.png 把克隆下来的项目里面的.git文件复制到我们的Hexo博客目录下: 20220511_07.png 注意：如果之前搭建博客的时候自己更换过主题文件的，请把主题文件里面的.git文件删除。 开始备份进入到Blogs根目录下，执行如下命令： 123git add .git commit -m &quot;Blog源文件备份&quot;git push origin hexo 这时候我们会看到Github上的hexo 分支就有我们的源文件了。 20220511_08.png 如果你想要每次更改东西都希望备份到hexo 分支上，可以执行如下步骤： 12345hexo cleangit add .git commit -m &quot;2022&quot;git pushhexo g &amp; hexo d 如何恢复博客假如我们现在更换了电脑，希望在新的电脑上继续写博客，把Github上hexo分支上的项目克隆到本地（注意：是我们备份的那个分支） 进入到克隆下来的文件夹，执行如下命令： 12npm install hexo-clinpm install hexo-deployer-git 然后再去安装主题相关的插件即可，当然如果你电脑上还没有 Node.js等环境的话可能还需要去安装相关的环境。现在我们就基本上可以在另一台电脑上继续我们的博客之旅啦～","link":"/blog/2022/10/23/hexo%E5%A4%87%E4%BB%BD/"},{"title":"matplotlib example gallery","text":"折线图 散点图概率密度图 绘图细节设置","link":"/blog/2022/10/25/matplotlibexample/"},{"title":"numpy","text":"读取文件1234567891011# 经过pandas 读取后, 再写出,部分数据小数位数超长# 在read_csv时, 加入参数float_precision=“round_trip”, 所有数据会当做string读取, 使用时再进行相应的转换为floatdf = pd.read_csv('%s/%s_%s_%s.csv' %(outputdir, region, var, YYYYMM),float_precision=&quot;round_trip&quot;)# 读取csvpd.read_csv(&quot;filename&quot;,sep=',',header=None,index=False) # sep 分隔符, index 指定index列名obs = pd.read_csv(&quot;d04_chem.txt&quot;,delim_whitespace = True) # 空格分割# csv编码问题： VS code先用正确编码打开（GB…?），然后保存为正常编码（能正确显示GB…），然后重新保存为UTF-8格式，读取正常。# excel 常用的list 月份 12345678months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']month = ['01','02','03','04','05','06','07','08','09','10','11','12']seasondict = { 'Spring':[3,4,5], 'Summer':[6,7,8], 'Autumn':[9,10,11], 'Winter':[1,2,12]} 区域范围定义 1234567891011121314151617llcrnrlon,urcrnrlon,llcrnrlat, urcrnrlat = 113.,119., 34., 41. # NCPllcrnrlon,urcrnrlon,llcrnrlat, urcrnrlat = 119.,122., 30., 33. # YRDllcrnrlon,urcrnrlon,llcrnrlat, urcrnrlat = 112.,115.5,21.5,24. # PRDllcrnrlon,urcrnrlon,llcrnrlat, urcrnrlat = 103.,107., 28.5,31.5 # SCB# ref. Li et al., PNAS, 2017cornersdict = { 'BTH':[114.,118., 37., 41.], 'YRD':[118.,122., 30., 33.], 'PRD':[112.,115.5,21.5,24.], 'SCB':[103.5,107., 28.5,31.5]}cornersdict = { 'CEC': [112., 122., 30., 41.], # from Shah et al., 2020, ACP, central-eastern China 'NCP': [113.75, 118.75, 35., 41.], # from Zhai et al., 2021, NG 'YRD': [118., 122., 30., 33.], 'PRD': [112., 115.5, 21.5, 24.], 'SCB': [103.5, 107., 28.5, 31.5]} 排序 12345change['Region'] = change.indexlist_custom = ['337城市',&quot;京津冀及周边&quot;,&quot;汾渭平原&quot;, '长三角', &quot;成渝地区&quot;,&quot;珠三角&quot;]change['Region'] = change['Region'].astype('category')change['Region'].cat.reorder_categories(list_custom, inplace=True)change.sort_values('Region', inplace=True) 配色123456789101112131415cnames = {'EC': '$BC$','OM': '$OM$','SO4':'$SO_4^{2-}$','NO3':'$NO_3^{-}$','NH4':'$NH_4^{+}$','Cl': '$Cl$','Other':'$MI$'}cdict = {'EC': '#231916','OM': '#009e42','SO4':'#e51620','NO3':'#212d8c','NH4':'#ef9817','Cl': '#d84d95','Other':'#cbced2'} 指定顺序排序1234list_custom = ['337城市',&quot;京津冀及周边&quot;,&quot;汾渭平原&quot;, '长三角', &quot;成渝地区&quot;,&quot;珠三角&quot;]regiondata['Region'] = regiondata['Region'].astype('category')regiondata['Region'].cat.reorder_categories(list_custom, inplace=True)regiondata.sort_values('Region', inplace=True) pandas按照根据指定列值插值123# 根据PM2.5的时间序列对其他组分进行插值data = pd.read_csv(&quot;ObservationData/OBS.csv&quot;,index_col='PM25')data.interpolate(method='index').to_csv(&quot;ObservationData/Obs_taizhou.csv&quot;) 获取数据落在bins区间的索引 - 用于按照污染物等级统计分析123456levels = [0, 100, 160, 200, 1000]O3 = data[&quot;O3&quot;]inds = np.digitize(O3,bins = levels)for i in range(1,5): print(i, O3[inds==i].mean()) 合并数组12np.column_stack((a,b)) #作为列合并np.row_stack((a,b)) # 作为行 数据框添加数据1234567891011df = pd.concat([df,pd.DataFrame.from_records([{ &quot;a&quot;:amax, &quot;b&quot;:bmax, &quot;sdate&quot;:df.index[i], &quot;edate&quot;:df.index[i+tmax-1], 'CO' :df[&quot;CO&quot;].iloc[i:i+tmax].mean(), 'NO2':df[&quot;NO2&quot;].iloc[i:i+tmax].mean(), 'O3' :df[&quot;O3&quot;].iloc[i:i+tmax].mean(), &quot;PM2.5&quot;:df[&quot;PM2.5&quot;].iloc[i:i+tmax].mean(), 'SO2':df[&quot;SO2&quot;].iloc[i:i+tmax].mean()}])]) 拼接两段数据123456789101112131415161718192021222324252627282930data2 = f.loc['2017-06-01':'2017-08-30']data3 = f.loc['2017-09-01':'2017-11-30']data1 = f.loc['2017-03-01':'2017-05-31']data4 = f.loc['2017-01-01':'2017-02-28']data5 = f.loc['2017-12-01':'2017-12-31']data0 = pd.concat([data4,data5])pd.concat([read_json(i) for i in adcodes],ignore_index=True)&gt;&gt;&gt; a=np.array([[1,2,3],[4,5,6]])&gt;&gt;&gt; b=np.array([[11,21,31],[7,8,9]])&gt;&gt;&gt; np.concatenate((a,b),axis=0)array([[ 1, 2, 3], [ 4, 5, 6], [11, 21, 31], [ 7, 8, 9]])&gt;&gt;&gt; np.concatenate((a,b),axis=1) #axis=1表示对应行的数组进行拼接array([[ 1, 2, 3, 11, 21, 31], [ 4, 5, 6, 7, 8, 9]])ax.plot(pm25[0:59],data[0:59,10],'.',c='k',alpha=0.5,label='Winter')ax.plot(pm25[334:365],data[334:365,10],'.',c='k',alpha=0.5)ax.plot(pm25[59:151],data[59:151,10],'.',c='b',alpha=0.5,label='Spring')ax.plot(pm25[151:243],data[151:243,10],'.',c='g',alpha=0.5,label='Summer')ax.plot(pm25[243:334],data[243:334,10],'.',c='r',alpha=0.5,label='Autumn')winter = np.concatenate((arrs[0:59],arrs[334:365]),axis=0)spring = arrs[59:151]summer = arrs[151:243]autumn = arrs[243:334] 日期12345678910111213df = pd.read_csv(fname,index_col=&quot;datetime&quot;)df.index = pd.to_datetime(df.index,format=&quot;%Y-%m-%d&quot;)df.index.month # 获取月份df.index.year # 获取年份df.loc['2000-6-1':'2000-6-10'] # 切片df[df.index.month.isin([5, 6, 7, 8, 9, 10])] # 按月份切片# 时区转换df.index = pd.to_datetime(df.time,format=&quot;%Y-%m-%dT%H:%M:%S&quot;, utc=True)df.index.tz_convert('Asia/Shanghai') 某个月的开始和结束日期 123from dateutil.relativedelta import relativedeltastart = datetime.datetime.strptime(&quot;2017-%s-01&quot; %mon,&quot;%Y-%m-%d&quot;)end = start + relativedelta(months=+1) + datetime.timedelta(days=-1) 时区转换 1data.index = pd.to_datetime(data.index,format='%Y%j%H').tz_localize('UTC').tz_convert(&quot;Asia/Shanghai&quot;) 设置时间格式 1res.index = res.index.strftime('%Y-%m-%d') 常见1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# 三维计算相关系数def pearsonr_2D(x, y): &quot;&quot;&quot;computes pearson correlation coefficient where x is a 1D and y a 2D array&quot;&quot;&quot; upper = np.sum((x - np.mean(x,axis=0)) * (y - np.mean(y, axis=0)), axis=0) lower = np.sqrt(np.sum(np.power(x - np.mean(x,axis=0), 2),axis=0) * np.sum(np.power(y - np.mean(y, axis=0), 2), axis=0)) rho = upper / lower return rhoA = np.array([[[1,3,4],[4,6,5]],[[5,7,8],[1,2,23]],[[3,9,4],[5,7,5]]])B = np.array([[[7,1,3],[14,4,2]],[[15,6,1],[6,7,91]],[[3,9,4],[5,7,5]]])c = pearsonr_2D(A,B)for i,region in enumerate(region): print(i,region)# 创建dataframe追加行数据df = pd.DataFrame(columns = [&quot;ebayno&quot;, &quot;p_sku&quot;, &quot;sale&quot;, &quot;sku&quot;]) #创建一个空的dataframe df = df.append(dframe1.loc[dframe1.p_sku == ps], ignore_index=True) #忽略索引,往dataframe中插入一行数据 df = df.append([{'site':site,'MB':mb,'NMB':nmb,'NME':nme,'r2':r2}],ignore_index=True)来自 &lt;http://blog.csdn.net/zn505119020/article/details/77324029&gt; 合并df = pd.concat([inputdf,classdf],axis=1)根据分组统计，对不同行操作gp_col = 'SITE'df_max = obs.groupby(gp_col)[species].max()df_min = obs.groupby(gp_col)[species2].min()插入列 insert（位置，列名，数据）df_max.insert(0,&quot;站点&quot;,sitename)DataFrame 切片操作，loc, ilocprint df.loc[1:3, ['total_bill', 'tip']]print df.loc[1:3, 'tip': 'total_bill'] print df.iloc[1:3, [1, 2]] print df.iloc[1:3, 1: 3]来自 &lt;https://blog.csdn.net/ly_ysys629/article/details/55224284&gt; 获取数据框列名print(df.columns) 获取数据框列df[&quot;column-name&quot;]选取行df[df[&quot;column-name&quot;]==&quot;spec-name&quot;]选取数据df.column[index]df.ix[0,1]列表转换成dataframedf = pd.DataFrame([w1_p,w2_p,w3_p,w4_p],index=['w1_pre','w2_pre','w3_pre','w4_pre'])修改dataframe的列名df.columns=['site','time','aqi','so2','no2','pm10','co','o3','pm2_5'] 查找12cname = allsite.query(&quot;Area == @city&quot;).iloc[0,4]cname = allsite.query(&quot;Area == '北京'&quot;).iloc[0,0] list 转 data frame12345keys = [&quot;price&quot;,&quot;toalAmount&quot;]values = [&quot;0.01&quot;,&quot;10000&quot;] d = dict(zip(keys,values))pd.DataFrame([dict(zip(columns,temp))],columns=columns,index=None) 等差数列1cticks = np.linspace(zmin, zmax, num=11, dtype=int) mask12345678910def regionmean(lat,lon,data,corners): llcrnrlon,urcrnrlon,llcrnrlat, urcrnrlat = corners mask = np.where((lat&lt;urcrnrlat)&amp;(lat&gt;llcrnrlat)&amp;(lon&lt;urcrnrlon)&amp;(lon&gt;llcrnrlon),1,0) if(len(data.shape)==3): mask3d = np.broadcast_arrays(mask[np.newaxis,:,:],data)[0] datamask = np.ma.masked_where(mask3d!=1, data) return np.nanmean(np.nanmean(datamask,axis=1),axis=1) else: datamask = np.ma.masked_where(mask!=1, data) return np.nanmean(datamask.flatten()) 对应元素运算123456a = np.array([[1, 2]])b = np.array([[2, 4]])r1 = a + b # [[3 6]]r2 = a - b # [[-1 -2]]r3 = a * b # [[2 8]]r4 = a / b # [[0.5 0.5]] 画图平滑1234567x = np.linspace(0,31,31); print(x)y = np.sum(data,axis=1)x_new = np.linspace(0,31,100)tck = interpolate.splrep(x,y)y_bspline = interpolate.splev(x_new,tck)ax2.plot(x,y,&quot;wo&quot;,ms=3)ax2.plot(x_new,y_bspline,'w-',linewidth=0.5)","link":"/blog/2022/10/23/numpy/"},{"title":"python安装","text":"conda安装库的规则 channel的配置 默认的conda channel是defaults，但这个channel的代码包不全。我的建议使用conda-forge channel，并设置严格优先使用conda-forge 设置镜像的时候，main和free结尾的对应defaults,所以需要将conda-forge的优先级设置为最高，比如用清华源可以如下设置 ```shell(atmos) xdxie@admin[~]$ cat ~/.condarcchannels: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ conda-forge defaultsshow_channel_urls: truechannel_priority: strictalways_yes: true1234567891011121314151617181920212223242526272829303132333435 - 查看可用的版本 - **`conda search keras`** - 安装特定的版本 - conda install -c conda-forge keras=1.0.7=py27_0 - - xgboost 1.1.1 py36h831f99a_0 anaconda/cloud/conda-forge xgboost 1.1.1 py37h3340039_0 anaconda/cloud/conda-forge xgboost 1.1.1 py38h950e882_0 anaconda/cloud/conda-forge# requirements- conda install --yes --file requirements.txt```pythonwrf-pythoncartopycmapsseabornpygribnetCDF4# xgboost 版本1.1.1xgboost=1.1.1conda install --yes --file requirements.txtpip install https://github.com/j08lue/pycpt/archive/master.zip pycpt 导入cpt配色方案 GitHub - j08lue/pycpt: Python tools to load and handle cpt (GMT format) color maps for use with matplotlib, e.g. from cpt-city https://github.com/j08lue/pycpt jupyterlab 安装设置 安装miniconda conda install jupyterlab 复制一个快捷方式，修改成： C:\\Software\\conda\\python.exe C:\\Software\\conda\\cwp.py C:\\Software\\conda C:\\Software\\conda\\python.exe C:\\Software\\conda\\Scripts\\jupyter-lab-script.py “D:\\云文件\\代码\\python\\jupyter” 并且起始位置改成最后的那句 D:\\云文件\\代码\\python\\jupyter 生成配置文件 jupyter lab —generate-config 单独的浏览器窗口, 修改config文件中的 c.NotebookApp.browser = ‘C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe —app=%s’ c.NotebookApp.notebook_dir = ‘’ 安装拓展 打开jupyterlab，enable拓展 关闭jupyterlab，安装nodejs： conda install nodejs 安装拓展，如：jupyter labextension install @jupyterlab/toc 导出html 隐藏代码1jupyter nbconvert Fig1_obs.vs.pred.ipynb --no-input --to html 字体设置成Helvetica 下载Helvetica.ttf 文件 找到matplotlib文件位置 ```pythonimport matplotlibprint(matplotlib.matplotlib_fname())12345678- 把字体文件移动到 matplotlib/mpl-data/fonts/ttf- 修改 matplotlibrc文件 - ```python # 改成这样 Helvetica 在最前面 font.sans-serif : Helvetica, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Avant Garde, sans-serif 删除缓存文件 ``bash $ cd ~/.matplotlib`$ rm fontlist*123456789101112131415161718192021# 镜像设置## 临时使用pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package注意，simple 不能少, 是 https 而不是 http## 设为默认升级 pip 到最新的版本 (&gt;=10.0.0) 后进行配置：pip install pip -Upip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple如果您到 pip 默认源的网络连接较差，临时使用本镜像站来升级 pip：pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U## conda添加镜像 conda config —add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config —add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config —add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud//pytorch/conda config —add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/conda config —set show_channel_urls yes1显示已经有的源 conda config —show channels123456789101112131415161718链接：https://www.jianshu.com/p/7e663bb0d904```shell - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main - conda-forge - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge - esri - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/menpo/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ - defaults","link":"/blog/2022/10/25/pythoninstall/"},{"title":"折线图","text":"123456789101112131415161718192021222324252627282930313233343536fig, ax = plt.subplots(figsize=(3,2))args = {&quot;ms&quot;:2,&quot;lw&quot;:1.}x = np.linspace(0,30,31)ax.plot(x,s2data13,'b^--',**args)ax.plot(x,s2data17,'r^--',**args)ax.plot(x,s2data1713,'g^--',**args)ax.plot(data13,'b.-',**args)ax.plot(data17,'r.-',**args)ax.plot([],'k.-',label='OBS',**args)ax.plot([],'k^--',label='SIM',**args)mo,mp,bias,ME,MNB,MNE,MFB,MFE,NMB,NME,RMSE,R,IoA = evaluation(data13, s2data13)ax.text(0.99, 0.84, r&quot;$R=%4.2f,\\ NMB=%4.1f\\%%,\\ NME=%4.1f\\%%$&quot; % (R,NMB*100,NME*100), color='b', transform=ax.transAxes,ha='right',fontsize=6.)mo,mp,bias,ME,MNB,MNE,MFB,MFE,NMB,NME,RMSE,R,IoA = evaluation(data17, s2data17)ax.text(.99, 0.91, r&quot;$R=%4.2f,\\ NMB=%4.1f\\%%,\\ NME=%4.1f\\%%$&quot; % (R,NMB*100,NME*100), color='r', transform=ax.transAxes,ha='right',fontsize=6.)ax.text(.3, 0.84,'2013', color='b', transform=ax.transAxes,ha='right',fontsize=6.)ax.text(.3, 0.91,'2017', color='r', transform=ax.transAxes,ha='right',fontsize=6.)# ax.axhline(y=100,color='r',lw=0.5,ls='--',alpha=0.5)# ax.axhline(y=180,color='b',lw=0.5,ls='--',alpha=0.5)ax.axhline(y=150,color='k',lw=0.5,ls='--',alpha=0.5)ax.set_ylim(0,340)ax.yaxis.set_major_locator(MultipleLocator(50.))ax.yaxis.set_minor_locator(MultipleLocator(10.))ax.set_xticks(np.linspace(0,30,6))ax.set_xticks(np.linspace(0,30,31),minor=True)ax.set_xticklabels([&quot;01-01&quot;,&quot;01-07&quot;,&quot;01-13&quot;,&quot;01-19&quot;,&quot;01-25&quot;,&quot;01-31&quot;,])ax.legend(loc=2, frameon=False,ncol=1, handletextpad=0.3, labelspacing =0.3, handlelength=1.,fontsize=6)figname = f&quot;{homepath}/figures/CEC_regionmean.png&quot;plt.savefig(figname, dpi=300, bbox_inches='tight',pad_inches = 0.05, facecolor='w') 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556config = { 'xtick.major.size': 0, 'xtick.minor.size': 2, 'ytick.major.size': 2, 'ytick.minor.size': 1,}plt.rcParams.update(config)seasondict = { 'Spring':(25,75), 'Summer':(25,95), 'Autumn':(18,68), 'Winter':(8,45)}xx = np.array([1,2,3,4,5,6,7,8,9])for season,ylims in seasondict.items(): dfs = pd.read_csv(f&quot;../obsdata/MDA8trends_{season}.csv&quot;) arr2d10 = dfs[['2013','2014','2015','2016','2017','2018','2019','2020','2021']].values arr2d11 = dfs.query(&quot;region == 'NCP'&quot;)[['2013','2014','2015','2016','2017','2018','2019','2020','2021']].values arr2d12 = dfs.query(&quot;region == 'FWP'&quot;)[['2013','2014','2015','2016','2017','2018','2019','2020','2021']].values arr2d13 = dfs.query(&quot;region == 'YRD'&quot;)[['2013','2014','2015','2016','2017','2018','2019','2020','2021']].values dfs = pd.read_csv(f&quot;../obsdata/pm25trends_{season}.csv&quot;) arr2d20 = dfs[['2013','2014','2015','2016','2017','2018','2019','2020','2021']].values arr2d21 = dfs.query(&quot;region == 'NCP'&quot;)[['2013','2014','2015','2016','2017','2018','2019','2020','2021']].values arr2d22 = dfs.query(&quot;region == 'FWP'&quot;)[['2013','2014','2015','2016','2017','2018','2019','2020','2021']].values arr2d23 = dfs.query(&quot;region == 'YRD'&quot;)[['2013','2014','2015','2016','2017','2018','2019','2020','2021']].values fig, ax = plt.subplots(figsize=(3.5,2.5)) ax.plot(xx, np.nanmean(arr2d11,axis=0),'o-',ms=3,color='C0',lw=1.,zorder=2) ax.plot(xx,np.nanmean(arr2d13,axis=0),'o-',ms=3,color='C2',lw=1.,zorder=2) axw = ax.twinx() axw.plot(xx, np.nanmean(arr2d21,axis=0),'s:',ms=3,color='C0',lw=1.,zorder=2) axw.plot(xx,np.nanmean(arr2d23,axis=0),'s:',ms=3,color='C2',lw=1.,zorder=2) ax.plot([],'ko-',ms=3,label=&quot;MDA8&quot;) ax.plot([],'ks:',ms=3,label=&quot;$PM_{2.5}$&quot;) ax.plot([],'.',color='C0',label=&quot;BTH&quot;) ax.plot([],'.',color='C2',label='YRD') for i in range(8): ax.axvline(x=1.5+i,ls='--',lw=0.1,c='k') leg = ax.legend(frameon=False,ncol=2,loc=1, handletextpad =0.3, # handle和文字距离 columnspacing=0.5, labelspacing=0.1, handlelength=2., ) for h, t in zip(leg.legendHandles, leg.get_texts()): t.set_color(h.get_color()) ax.set_xlim(0.5,9.5) ax.set_ylim(ylims) ax.set_xticks(xx) ax.set_xticklabels(years,rotation=0.) ax.set_xticks(xx+0.5,minor=True) ax.set_ylabel(f&quot;{season} MDA8 ozone (ppb)&quot;) axw.set_ylabel(f&quot;{season} &quot; + &quot;$PM_{2.5}\\ (\\mu g\\ m^{-3})$&quot;) plt.savefig(f'../figures/pm25MDA8_trends_{season}',bbox_inches='tight',pad_inches = 0.05, dpi=300, facecolor='w')","link":"/blog/2022/10/25/%E6%8A%98%E7%BA%BF%E5%9B%BE/"},{"title":"数据分析","text":"检验数据是否正态分布 Q-Q图，如果是正态分布，则图像呈一条直线，否则不是正态分布 1234import statsmodels.api as smimport pylabsm.qqplot(data, line='s')pylab.show()","link":"/blog/2022/10/25/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%8F%8A%E7%BB%9F%E8%AE%A1%E6%96%B9%E6%B3%95/"},{"title":"服务器管理","text":" 内容升级中...","link":"/blog/2022/10/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AE%A1%E7%90%86/"},{"title":"概率密度图","text":"123456789101112131415161718192021222324252627282930y1 = orgdata[&quot;O3&quot;]y2 = dwedata[&quot;O3&quot;]config = { 'xtick.direction': 'in', 'xtick.major.size': 2, 'xtick.minor.size': 1, 'ytick.direction': 'in', 'ytick.major.size': 2, 'ytick.minor.size': 1, 'axes.labelpad': 2.0,}plt.rcParams.update(config)fig, ax = plt.subplots(1,1,figsize=(4,2))ax.hist(y1, 50, histtype='step', stacked=True, fill=False, density=True,label=[&quot;Obs.&quot;])ax.hist(y2, 50, histtype='step', stacked=True, fill=False, density=True,label=[&quot;De-weather&quot;])pmax = 0.02ax.set_yticks(np.linspace(0,pmax,5))ax.set_yticklabels(np.linspace(0,pmax*1000,5,dtype=int))ax.set_ylabel(r'$Probability\\ density\\ (\\times 10^{-3})$')ax.legend()ax.set_xlabel(r&quot;$O_{3}\\ concentrations\\ (\\mu g\\ m^{-3})$&quot;)figname = f&quot;{homepath}/figures/O3_pdf.png&quot;plt.savefig(figname, dpi=300, bbox_inches='tight',pad_inches = 0.05, facecolor='w') 1234567891011121314151617181920x = dfs.anum_bins = 50fig, ax = plt.subplots(figsize=(2,2))# the histogram of the datavalues, base, _ = ax.hist(x, num_bins, density=True,ec=&quot;k&quot;,lw=0.1)ax_bis = ax.twinx()values = np.append(values,0)ax_bis.plot( base, np.cumsum(values)/ np.cumsum(values)[-1], color='darkorange', marker='o', linestyle='-', markersize = 1)ax.set_xlabel('slope')ax.set_ylabel('Probability density')ax.axvline(x=0,c='k',lw=0.5)fig.tight_layout()plt.savefig('../figures/slope_histogram',bbox_inches='tight',pad_inches = 0.05, dpi=300, facecolor='w') 123456789101112131415161718192021def pdf_cdf(ax, y, num_bins = 100): res_freq = stats.relfreq(y,num_bins) pdf_value = res_freq.frequency cdf_value = np.cumsum(pdf_value) x = res_freq.lowerlimit + np.linspace(0,res_freq.binsize*(res_freq.frequency.size-1), res_freq.frequency.size) ax.bar(x,pdf_value,width=res_freq.binsize,color=colorblind[0],lw=0.2) axw = ax.twinx() axw.plot(x,cdf_value,'-',c=colorblind[1],lw=1) axw.set_ylim(0,1) ax.set_xlabel('$\\Delta{MDA8}\\ (\\%)$',labelpad=1) ax.set_ylabel('Probability density') ax.set_xlim(-100,100) ax.axvline(x=0,lw=0.5,color='k') print(cdf_value[np.where(x&gt;0)]) fig, ax = plt.subplots(1,1,figsize=(2,2))pdf_cdf(ax, y)figname = f&quot;{homepath}/figures/pdf_cdf_{city}.png&quot;plt.savefig(figname, dpi=300, bbox_inches='tight',pad_inches = 0.05, facecolor='w')","link":"/blog/2022/10/25/%E6%A6%82%E7%8E%87%E5%AF%86%E5%BA%A6%E5%9B%BE/"},{"title":"箱形图","text":"箱形图123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960config = { 'xtick.direction': 'in', 'ytick.direction': 'in', 'xtick.major.size': 2, 'xtick.minor.size': 1.5, 'ytick.major.size': 2, 'ytick.minor.size': 1.5, 'xtick.top': True, 'ytick.right': True, }plt.rcParams.update(config)station = &quot;1001A&quot;; years = [2014,2015,2016,2017,2018,2019,2020,2021,2022]; season = 'Summer'dfs = pd.DataFrame(columns=[&quot;station&quot;,&quot;region&quot;,&quot;lat&quot;,&quot;lon&quot;,'2014','2015','2016','2017','2018','2019','2020','2021','2022','slope','p'])fig, axs = plt.subplots(2,2,figsize=(4.8,3.2))axs = axs.flatten()arg = {'widths':0.4,'showfliers':False,'showmeans':True,'meanline':False, 'boxprops':{'color':'#1084d8'}, 'medianprops':{'color':'#1084d8'}, 'meanprops' : dict(marker='o', markeredgecolor='#1084d8',ms=2, markerfacecolor='none'), 'whiskerprops':{'color':'#1084d8','ls':'--'}, 'capprops':{'color':'#1084d8'} }for i, region in enumerate(cornersdict.keys()): ax = axs[i] dfres = np.loadtxt(f&quot;../obsdata/dMDA8_dPM25_day_{region}_{season}.csv&quot;) ax.boxplot(dfres[:,0],positions=[0],**arg) ax.boxplot(dfres[:,1],positions=[1],**arg) ax.boxplot(dfres[:,2],positions=[2],**arg) ax.boxplot(dfres[:,3],positions=[3],**arg) ax.boxplot(dfres[:,4],positions=[4],**arg) ax.boxplot(dfres[:,5],positions=[5],**arg) ax.boxplot(dfres[:,6],positions=[6],**arg) ax.boxplot(dfres[:,7],positions=[7],**arg) ax.set_ylim(40,101) ax.set_xticks([0,1,2,3,4,5,6,7]) ax.set_xticklabels([-1000, -30,-20,-10,0,10,20,30]) # ax.axhline(y=100,lw=0.5,c='k') # ax.set_xticks([2015,2017,2019,2021],minor=True) # ax.yaxis.set_major_locator(MultipleLocator(5)) # x = [2015,2016,2017,2018,2019,2020] # y = temp[['2015','2016','2017','2018','2019','2020']].mean() # slope, intercept, r_value, p_value, std_err = stats.linregress(x,y) # f = np.poly1d([slope, intercept]) # ax.plot(x, f(x), 'r-',lw=1.) # print(r_value,p_value) ax.text(0.05,0.85,f&quot;{alpha[i]} {region}&quot;,transform=ax.transAxes,ha=&quot;left&quot;) # ax.text(0.45,0.85,&quot;k=%.2f; $R^2$=%.2f&quot; %(slope, r_value**2),transform=ax.transAxes,ha=&quot;left&quot;,color='r')axs[0].set_ylabel(&quot;$Fraction\\ (\\%)$&quot;)axs[2].set_ylabel(&quot;$Fraction\\ (\\%)$&quot;)figname = f&quot;{homepath}/figures/dMDA8.dpm25.ratio_summer.png&quot;plt.savefig(figname, dpi=300, bbox_inches='tight',pad_inches = 0.05, facecolor='w')","link":"/blog/2022/10/25/%E7%AE%B1%E5%9E%8B%E5%9B%BE/"},{"title":"","text":"米散射原理 散射原理：入射波照射粒子，使得粒子磁化，感应出复杂电荷和电流分布。它们以同样频率变化，向外辐射电磁波就是散射 粒子直径D和入射波长$\\lambda$ : $D/\\lambda&lt;1$ 反射 入射波长 $\\lambda==550\\ nm$ 粒子直径$2*2.5\\mu m$ 根据粒子直径可以将散射分成： 瑞利散射、米散射 定义尺度参数$\\chi=2\\pi r/\\lambda$ 瑞利散射：半径r&lt;&lt;$\\lambda$， 判断条件：$\\chi = 2\\pi r/\\lambda &lt; 0.13$ ; $\\chi&lt;0.1$ 或$r&lt;0.05\\mu m$ 米散射：当$\\chi= 2\\pi r/\\lambda &gt; 0.13$ 时，瑞利散射会产生较大偏差。故而引入米散射算法,判断条件：$\\chi&gt;0.1-0.3$","link":"/blog/2023/01/03/%E7%B1%B3%E6%95%A3%E5%B0%84/"},{"title":"概念图","text":"素材网站https://www.freepik.com/ PPT导出图片问题 修改注册表 计算机\\HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\PowerPoint\\Options 在上面的路径下新建Dword(32位)，命名成 ExportBitmapResolution, 值改成10进制的600","link":"/blog/2022/10/25/%E7%BB%98%E5%9B%BE%E7%B4%A0%E6%9D%90/"},{"title":"matplotlib绘图细节设置","text":"导入相关库1234567891011121314151617181920212223242526272829303132333435363738394041424344import pandas as pdimport matplotlib.pyplot as pltfrom matplotlib.mathtext import _mathtext as mathtextfrom matplotlib.pyplot import MultipleLocatormathtext.FontConstantsBase.sup1 = 0.5mathtext.FontConstantsBase.sub1 = 0.3mathtext.FontConstantsBase.sub2 = 0.3import warningswarnings.filterwarnings(&quot;ignore&quot;)config = { &quot;font.family&quot;: 'sans-serif', &quot;font.sans-serif&quot;: [&quot;Arial&quot;], &quot;font.size&quot;: 8, &quot;pdf.fonttype&quot; : 42, &quot;mathtext.fontset&quot;: &quot;custom&quot;, 'mathtext.rm' : 'Arial', &quot;mathtext.default&quot;: &quot;rm&quot;, 'xtick.direction': 'in', 'xtick.major.size': 2, 'xtick.minor.size': 1, 'xtick.major.pad': 2, 'ytick.direction': 'in', 'ytick.major.size': 2, 'ytick.minor.size': 1, 'ytick.major.pad': 2,}plt.rcParams.update(config)# 打开上边和右边坐标轴的tickconfig = { 'xtick.direction': 'in', 'ytick.direction': 'in', 'xtick.major.size': 2, 'xtick.minor.size': 1.5, 'ytick.major.size': 2, 'ytick.minor.size': 1.5, 'xtick.top': True, 'ytick.right': True, }plt.rcParams.update(config) 通过kwargs给函数传递参数 好处：使代码简洁化，且能保持设置的一致性，推荐使用！！！ 12kwargs = {&quot;width&quot;:width,&quot;color&quot;:colors[0],&quot;lw&quot;:0.,&quot;ec&quot;:'k'}ax.bar(x+i*width*1.1,data0[:,i],hatch=hatchs[i],**kwargs) 坐标轴相关设置123456789101112131415161718192021222324252627282930313233# 设置坐标轴范围ax.set_ylim(0,100)ax.set_xlim(0,100)# 设置坐标轴ticks## 手动设置labels和ticks位置ax.set_xticks([1,2,3,4])ax.set_xticklabels([&quot;2013 &quot;,&quot;Mete&quot;,&quot;Emis&quot;,&quot; 2017&quot;],rotation=0.,fontsize=6)ax.set_yticks(np.linspace(0,60,4,dtype=&quot;int&quot;))ax.set_yticklabels(np.linspace(0,60,4,dtype=&quot;int&quot;))## 隐藏ticksax.set_xticks([])# 设置主、次要ticks (几种方法)## 手动设置from matplotlib.pyplot import MultipleLocatorax.yaxis.set_minor_locator(MultipleLocator(5))ax.yaxis.set_major_locator(MultipleLocator(25))## 手动设置ax.set_xticks(np.linspace(0,30,6))ax.set_xticks(np.linspace(0,30,31),minor=True)## 自动生成ax.minorticks_on()# 关闭坐标轴ax.set_axis_off()# 隐藏坐标轴，设置线条粗细，一般不需要ax.get_xaxis().set_visible(False)ax.spines['top'].set_visible(False)ax.spines['bottom'].set_visible(True) # 可见axi.spines['bottom'].set_linewidth(0.5) # 线条粗细axi.spines['left'].set_linewidth(0.5) 图例设置12345678910111213141516171819202122232425262728293031## 添加legend - 自动生成ax4.legend(frameon =False, # 边框 ncol=6, # 列数量 loc=2, # 位置 # loc=[0.5, 0.5], # 位置 handletextpad =0.3, # handle和文字距离 columnspacing=0.5, # 列间距 labelspacing=0.1, # 行间距 handlelength=1., ) # handle长度## 添加legend - 手动设置n1,n2 = [],[]cat_order = [' 0-12 h', '12-24 h', '24-36 h', '36-48 h', '48-60 h','60-72 h','72-84 h', '84-96 h', '96-108 h', '&gt;108 h']for i in range(10): n1.append(axs[-1].bar(0, 0,color=colors[i]))l1 = axs[-1].legend(n1,cat_order,loc=[0.08, -0.05], frameon=False, ncol=3, handletextpad=0.1, columnspacing=0.8, handlelength=1.,prop={'size':5})for i in range(3): n2.append(axs[-1].bar(0, 0,color=&quot;#dadada&quot;, hatch=hatchs[i]*2))l2 = axs[-1].legend(n2, ['M13E13','M17E13','M17E17'], loc=[0.08,0.8], frameon=False, ncol=3, handletextpad=0.1, columnspacing=0.5, handlelength=1.,prop={'size':5})axs[-1].add_artist(l1)## pandas或者seaborn画图，删除默认的legendax.get_legend().remove()## 填色图的图例 - colorbar - 需要自己改改l, b, w, h = ax1.get_position().boundsb, h = 0.09, 0.12position=fig.add_axes([l+0.02, b, 0.16, h/10]) #位置[左,下,长，高]cbar = plt.colorbar(cs1,cax=position,orientation=&quot;horizontal&quot;)cbar.ax.tick_params(axis='x', direction='in',length=10,labelsize=15)cticks= np.linspace(zmin, zmax, num=11, dtype=int); cbar.set_ticks(cticks); cbar.set_ticklabels(cticks) 添加文字说明1234567891011# 添加文字## 一般用于子图中ax.text(-0.18,0.95,&quot;(b)&quot;,transform=ax.transAxes,fontsize=10,fontweight=&quot;bold&quot;)## 整体画布中使用fig.text(0.5,0,r&quot;$PM_{2.5}\\ concentrations\\ (\\mu g\\ m^{-3})$&quot;,ha=&quot;center&quot;)# 标题 ## 坐标轴标题ax.set_ylabel(r'$Probability\\ density\\ (\\times 10^{-3})$')## 主标题，通过y改变位置ax.set_title(title,y=0.85) 添加辅助线和阴影区域12345678910# 横、竖线条ax.axvline(x=150,c=&quot;k&quot;,lw=0.2,ls=&quot;-&quot;)ax.axhline(y=150,c=&quot;k&quot;,lw=0.2,ls=&quot;-&quot;)# 竖的阴影区域，如用于标记污染天、夜间kwargs = {&quot;alpha&quot;:0.5,&quot;color&quot;:&quot;grey&quot;,&quot;ec&quot;:None}ax.axvspan(x[0], x[snight],**kwargs )for i in range(ndays-1): ax.axvspan(x[enight+i*24],x[snight+24+i*24],**kwargs) ax.axvspan(x[enight+(ndays-1)*24],x[-1],**kwargs) 添加right-y-axis1234567axw = ax.twinx()## 设置一个特定颜色rycolor = '#ae24d1'kwargs = {&quot;ms&quot;:1,&quot;c&quot;:rycolor}axw.plot(x,y,**kwargs)axw.tick_params(axis='y', colors=rycolor)axw.spines['right'].set_color(rycolor) 颜色设置12345678910111213141516171819202122## 改变默认的颜色循环import matplotlib as mplmpl.rcParams['axes.prop_cycle'] = mpl.cycler(color = [&quot;#0073C2FF&quot;,&quot;#EFC000FF&quot;,&quot;#868686FF&quot;,&quot;#CD534CFF&quot;,&quot;#7AA6DCFF&quot;,&quot;#003C67FF&quot;,&quot;#8F7700FF&quot;,&quot;#3B3B3BFF&quot;,&quot;#A73030FF&quot;])## 从colormap中提取几个颜色from mycolorpy import colorlist as mcpcolors=mcp.gen_color(cmap=&quot;Blues&quot;,n=11)### 或者import cmapscolors = cmaps.MPL_Dark2.colors[::-12,:] colors = colors[0:10,:]colors = colors[::-1,:]## 自己设计colormap （类似于在gnuplot中的设置，根据nodes的位置[0-1]来指定设置颜色）from matplotlib.colors import LinearSegmentedColormapcolors = [&quot;white&quot;, &quot;#e9e9fc&quot;, &quot;blue&quot;, &quot;green&quot;,&quot;yellow&quot;,&quot;red&quot;]nodes = [0.0, 0.01, 0.1, 0.25, 0.5, 1.0]mycmap = LinearSegmentedColormap.from_list(&quot;mycmap&quot;, list(zip(nodes, colors)))# 组分颜色colordict = {&quot;SO4&quot;:&quot;#e40b16&quot;,&quot;NO3&quot;:&quot;#211cc0&quot;,&quot;NH4&quot;:&quot;#e79700&quot;,&quot;OC&quot;:&quot;#70dc11&quot;,&quot;EC&quot;:&quot;#000000&quot;, &quot;Cl&quot;:&quot;#cb01a7&quot;,&quot;POA&quot;:&quot;#00cc67&quot;,&quot;SOA&quot;:&quot;#00994d&quot;} color = [&quot;#0073C2FF&quot;,&quot;#EFC000FF&quot;,&quot;#868686FF&quot;,&quot;#CD534CFF&quot;,&quot;7AA6DCFF&quot;,&quot;#003C67FF&quot;,&quot;#8F7700FF&quot;,&quot;#3B3B3BFF&quot;,&quot;#A73030FF&quot;] blind friendly colors colorblind = [&quot;#006ba4&quot;,&quot;#ff800e&quot;,&quot;#ababab&quot;,&quot;#595959&quot;,&quot;#5f9ed1&quot;,&quot;#c85200&quot;,&quot;#898989&quot;,&quot;#a2c8ec&quot;,&quot;#ffbc79&quot;,&quot;#cfcfcf&quot;] 从cmap提取n个颜色 ```pythonfrom mycolorpy import colorlist as mcpcolors=mcp.gen_color(cmap=”viridis”,n=9)12345678- 自定义颜色 - ```python from matplotlib.colors import LinearSegmentedColormap colors = ['#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c'] nodes = [0.0, 0.01, 0.1, 0.25, 0.5, 1.0] mycmap = LinearSegmentedColormap.from_list(&quot;mycmap&quot;, list(zip(nodes, colors))) 创建子图123456789101112131415161718192021222324252627282930313233343536373839# 规则的子图 （n, m）## 方法1 - subplots 基本版fig, axs= plt.subplots(4,3,figsize=(5,5),sharex=False,sharey=False)fig.subplots_adjust(hspace=0.1,wspace=0.2)axs = axs.flatten()## 方法2 - gridspecimport matplotlib.gridspec as gridspecfig = plt.figure(figsize=(6,2))gs = gridspec.GridSpec(nrows=2, ncols=1, height_ratios=[1.4,2])fig.subplots_adjust(hspace=0.,wspace=0.28)ax1 = fig.add_subplot(gs[0,:])ax2 = fig.add_subplot(gs[1,:])axs = [ax1,ax2]# 不规则的子图 （n, m）## 方法3 - subplots 进阶版fig = plt.figure(figsize=(8, 6))ax1= fig.add_subplot(3,3,1)ax2= fig.add_subplot(3,3,2)ax3= fig.add_subplot(3,3,4)ax4= fig.add_subplot(3,3,5)ax5= fig.add_subplot(3,3,7)ax6= fig.add_subplot(3,3,8)ax7= fig.add_subplot(2,3,3)ax8= fig.add_subplot(2,3,6)## 方法4 - subplot2grid - 方法3间隔较大，个人认为方法4更好fig = plt.figure()fig.set_figheight(6); fig.set_figwidth(6)ax1 = plt.subplot2grid((3, 6), (0, 0), colspan=2)ax2 = plt.subplot2grid((3, 6), (0, 2), colspan=2)ax3 = plt.subplot2grid((3, 6), (0, 4), colspan=2)ax4 = plt.subplot2grid((3, 6), (1, 0), colspan=2)ax5 = plt.subplot2grid((3, 6), (1, 2), colspan=2)ax6 = plt.subplot2grid((3, 6), (1, 4), colspan=2)ax7 = plt.subplot2grid((3, 6), (2, 0), colspan=3)ax8 = plt.subplot2grid((3, 6), (2, 3), colspan=3) 画图字体设置 SCI投稿推荐使用 Arial字体（一般都有） 下载字体https://www.download-free-fonts.com 复制到matplotlib对应字体目录下/r008/xdxie/software/anaconda3/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf，删除home目录下的.cache/matplotlib文件夹，添加下面的语句，就可以了 12345678910111213import matplotlib.font_manager as font_managerfontpath = &quot;/r008/xdxie/software/anaconda3/lib/python3.8/site-packages/matplotlib/mpl-data/fonts/ttf/times new roman.ttf&quot;prop = font_manager.FontProperties(fname=fontpath)plt.rcParams['font.family'] = prop.get_name()import matplotlib.pyplot as plt plt.rcParams['font.sans-serif'] = ['SimHei']#用来显示中文标签plt.rcParams['axes.unicode_minus'] = False#用来正常显示负号# 单独设置text字体ax.text(116.0,40.25, u'北京',fontfamily=prop.get_name())# windows下字体目录 C:/windows/fonts 中文字体解决方案 1. 查看matplotlib字体位置 1234567pythonimport matplotlib print(matplotlib.matplotlib_fname())#记录下来，字体位置我的是：/home/ruanjianlaowang/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/matplotlibrcexit() 2. 上传字体到服务器 123cd /home/ruanjianlaowang/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf通过ftp或者其他方式，将字体传上去，我们传的是：simhei.ttf 3. 删除字体缓存 12cd ~/.cache/matplotlibrm -rf * 4. 重启python应用 1nohup python k-means.py &amp; 说明： 假如还没生效，再更改个配置文件试试。（我们以前没更改这个配置文件，但是这次发生了个插曲，这次用的jmeter测试，一直还是乱码，后来改了这个还是不行，原来是jmeter的问题） 12345cd /home/ruanjianlaowang/anaconda3/lib/python3.7/site-packages/matplotlib/mpl-datavi matplotlibrc font.family : sans-serif #去掉前面的#font.serif : simhei, DejaVu Serif, #新加了simhei 计算统计参数1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950def evaluation(obs,sim): ''' sim: prediction, n-D np.array obs: observation, n-D np.array Assume the first dimension is time, deal with time dimension NOTE: users should set cut off value for MNB and MNE: As for O3 1h and 8h evaluation: [ozone] &gt; 40 or 60 ppb is suggested by EPA, but 30 ppb is used in J.L. Hu (2016) ''' N = obs.shape[0] # mean observation mo = np.nanmean(obs,axis=0) # mean prediction mp = np.nanmean(sim,axis=0) error = sim - obs # bias error (B) / mean bias (MB) / Bias bias = np.nansum(error,axis=0)/N # Gross Error (E/GE) / Mean Absolute Error (MAE) / Mean Error (ME) ME = np.nansum(np.abs(error),axis=0)/N # Mean Normalized Bias (MNB) | range(-100% to +++) | NOTE What happend if obs .eq. zero??? MNB = np.nansum(error/obs,axis=0)/N # Mean Normalized Error (MNE) | range(0 to +++) | NOTE What happend if obs .eq. zero??? MNE = np.nansum(np.abs(error/obs),axis=0)/N # Mean Fractional Bias (MFB) | range(-200% to +200%) | NOTE What happend if (obs+sim) .eq. zero??? MFB = np.nansum(error/(sim+obs)*2.,axis=0)/N # Mean Fractional Error (MFE) | range(0 to +200%) | NOTE What happend if (obs+sim) .eq. zero??? MFE = np.nansum(np.abs(error)/(sim+obs)*2.,axis=0)/N # Normalized Mean Bias (NMB) | range(-100% to +++) NMB = np.nansum(error,axis=0)/np.nansum(obs,axis=0) # Normalized Mean Error (NME) | range(0 to +++) | NME = np.nansum(np.abs(error),axis=0)/np.nansum(obs,axis=0) # Root Mean Square Error (RMSE) RMSE = np.sqrt(np.nansum(np.square(error),axis=0)/N) # correlation coefficient (R) coef = ma.corrcoef(ma.masked_invalid(obs), ma.masked_invalid(sim)); R = coef[0,1] # Index of Agreement (IoA) IoA = 1 - np.nansum(np.square(error),axis=0)/np.nansum(np.square(np.abs(sim-mo)+np.abs(obs-mo)),axis=0) return mo,mp,bias,ME,MNB,MNE,MFB,MFE,NMB,NME,RMSE,R,IoA","link":"/blog/2022/10/25/%E7%BB%98%E5%9B%BE%E7%BB%86%E8%8A%82%E8%AE%BE%E7%BD%AE/"},{"title":"黑碳形貌相关的理论基础","text":"基本概念测量仪器：差分电迁移率粒径分析仪（ＤＭＡ） Differential mobility analyzer 是利用不同粒径的带电粒子在电场中的受力大小不同而筛选出单粒径分布的颗粒物 串联差分电迁移率粒径分析-气溶胶质量分析系统（DMA-APM） 能够得到的数据：电迁移粒径mobility diameters ($D_{mob}$), 有效密度effective density ($\\rho_{eff}$ ), 等效体积粒径volume-equivalent diameter ($D_{ve}$) 电迁移粒径指在相同条件下具有相同电迁移力的球形颗粒物的粒径，与有效密度对应，可通过公式计算： $m = \\rho_{eff} \\times \\pi/6 \\times D_{mob}^3$ 对于非球形粒子，$D_{mob}$大于$D_{ev}$；对于球形粒子，两者相等 形状因子 分形结构（fractal aggregates）中的几个概念： 分形维数$D_f$: 球形时，m和$D_p$的3次方成正比，所以$D_f$=3 非球形时，$D_f$&lt;3，且越偏离球形，$D_f$越小 极端情况，当成一条直线时，$D_f$=1 计算公式，其中$R_g$是旋转半径 $N=k_g \\times (2R_g/d_p)^{D_f}$ 包裹物粒径，$D_p/D_c$比值： 对于裸露的BC（bare BC particles）： $D_p/D_c=1$ 对于全包裹的BC（embedded BC particles）：$D_p/D_c$等于包裹物和BC聚集体（BC aggregate）的体积比 对于部分包裹的BC（partly coated BC particles）：$D_p/D_c$ 不能简单得到，如图中红线所示是整个粒子的粒径（$D_p$） $D_p/D_c = [(V_{coating}+V_{BC}-V_{BCinside})/V_{BC}]^{1/3}$ (Wang et al., 2021, JGR) 被包裹住的部分的总质量=粒子总质量-裸露在外的BC质量? (Wu et al., 2018, EST, Light Absorption Enhancement of Black Carbon Aerosol Constrained by Particle Morphology ) 形状因子$\\chi$ 定义为在空气中运动的不规则颗粒物所受到的阻力与同等条件下等体积的球形颗粒物所受到的阻力的比值， 阻力$F_{drag}(D)=3 \\pi \\eta vD/C(D)$；C(D)是滑动校准系数，有公式 形状因子 $\\chi = F_{drag}(D_p)/F_{drag}(D_{ev})=D_pC(D_{ev})/D_{ev}C(D_p)$ 当颗粒物为规则的球形，二者阻力相等，即形状因子为１，而不规则颗粒物所受到的阻力$F_{drag}(D_p)$会大于对应的球形颗粒物所受到的阻力$F_{drag}(D_{ev})$，即形状因子大于１，并且该值越大，表示越偏离球形","link":"/blog/2022/10/25/%E9%BB%91%E7%A2%B3%E5%BD%A2%E8%B2%8C%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"haze","slug":"haze","link":"/blog/tags/haze/"},{"name":"meteoroogy","slug":"meteoroogy","link":"/blog/tags/meteoroogy/"},{"name":"WRF","slug":"WRF","link":"/blog/tags/WRF/"},{"name":"visualization","slug":"visualization","link":"/blog/tags/visualization/"},{"name":"other","slug":"other","link":"/blog/tags/other/"},{"name":"data analysis","slug":"data-analysis","link":"/blog/tags/data-analysis/"},{"name":"software","slug":"software","link":"/blog/tags/software/"},{"name":"reach","slug":"reach","link":"/blog/tags/reach/"},{"name":"黑碳","slug":"黑碳","link":"/blog/tags/%E9%BB%91%E7%A2%B3/"}],"categories":[{"name":"paper","slug":"paper","link":"/blog/categories/paper/"},{"name":"model","slug":"model","link":"/blog/categories/model/"},{"name":"python","slug":"python","link":"/blog/categories/python/"},{"name":"hexo","slug":"hexo","link":"/blog/categories/hexo/"},{"name":"example","slug":"example","link":"/blog/categories/example/"},{"name":"data","slug":"python/data","link":"/blog/categories/python/data/"},{"name":"linux","slug":"linux","link":"/blog/categories/linux/"}],"pages":[{"title":"tags","text":"","link":"/blog/tags/index.html"},{"title":"categories","text":"","link":"/blog/categories/index.html"},{"title":"赋得古原草送别","text":"离离原上草，一岁一枯荣。 野火烧不尽，春风吹又生。 远芳侵古道，晴翠接荒城。 又送王孙去，萋萋满别情。","link":"/blog/about/index.html"}]}